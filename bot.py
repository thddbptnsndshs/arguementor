from copy import copy
import os
from openai import OpenAI
import json
import uuid
import pickle
from prompts import *
import sqlite3
import random

import telebot
from telebot import types

import requests

# –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
bot = telebot.TeleBot(token=os.environ["TELEBOT_TOKEN"])
client = OpenAI(
    api_key=os.environ["OPENAI_API_KEY"],
    base_url="https://api.proxyapi.ru/openai/v1",
)

intro_text = """–Ø -- –±–æ—Ç-–∞—Ä–≥—É–º–µ–Ω—Ç–æ—Ä. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—Å—Ç–∞—Ç—å –Ω–∞ –ø—É—Ç—å –∫ 100 –±–∞–ª–ª–∞–º –∑–∞ –ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∏ –ø–æ—Å–≤—è—â—É —Ç–µ–±—è –≤ –º–∏—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –¢–≤–æ—ë —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ–±–æ–π–¥—ë—Ç—Å—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–∞–∫ –ø–æ–∑–≤–æ–ª—å –º–Ω–µ —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏—Ç—å.

–ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É - —ç—Ç–æ –∫–∞–∫ —Å—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–Ω–∏–º–µ: —Ç—Ä–µ–±—É–µ—Ç —É–º–µ–Ω–∏—è, —Å–∏–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—á–∏–Ω–µ–Ω–∏—é - —ç—Ç–æ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥–µ—Ä–æ–µ–≤ –ø–µ—Ä–µ–¥ –±–∏—Ç–≤–æ–π. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –ø–æ–±–µ–¥–µ. –û—à–∏–±–∫–∏ - —ç—Ç–æ –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ.

–ù–∞–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –Ω–∞—à—ë–ª –≤ —Ç–µ–∫—Å—Ç–µ, –∏ –º—ã –Ω–∞—á–Ω—ë–º."""
restart_text = """–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–≤–æ—ë–º —Ç–µ–∫—Å—Ç–µ?"""
chats_saver = {}
problem_saver = {}
literature_to_go = {}
titles = {}
argument = {}

def record_to_db(message):
    # Connect to the database or create it if it doesn't exist
    conn = sqlite3.connect('records.db')

    # Create a cursor object to interact with the database
    c = conn.cursor()

    # Create a table to store records
    c.execute('''CREATE TABLE IF NOT EXISTS records
                 (id INTEGER PRIMARY KEY, chat_id TEXT, problem TEXT, literature TEXT, titles TEXT, argument TEXT)''')

    # Insert a record into the table
    c.execute("INSERT INTO records (chat_id, problem, literature, titles, argument) VALUES (?, ?, ?, ?, ?)", 
              ([str(ele) for ele in [message.chat.id, 
                                     problem_saver.get(message.chat.id), 
                                     literature_to_go.get(message.chat.id), 
                                     titles.get(message.chat.id), 
                                     argument.get(message.chat.id)
                                    ]]))

    # Commit the changes to the database
    conn.commit()

    # Close the connection
    conn.close()


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(
        chat_id=message.chat.id,
        text=intro_text,
        reply_markup=markup
    )

@bot.message_handler(commands=['restart'])
def new_game_bot(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(
        chat_id=chat_id,
        text=restart_text,
        reply_markup=markup
    )
        
#     for record in [problem_saver, chats_saver, literature_to_go, titles, argument]:  
    if message.chat.id in chats_saver:
        del chats_saver[message.chat.id]
    if message.chat.id in literature_to_go:
        del literature_to_go[message.chat.id]
    if message.chat.id in problem_saver:
        del problem_saver[message.chat.id]
    if message.chat.id in titles:
        del titles[message.chat.id]
    if message.chat.id in argument:
        del argument[message.chat.id]

@bot.message_handler(content_types=['text'], func=lambda msg: '–ø—Ä–æ–±–ª–µ–º–∞' in msg.text.lower())
def choose_option(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    itembtn1 = types.KeyboardButton('–ù–∞–ø–∏—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç')
    itembtn2 = types.KeyboardButton('–ü–æ—Å–æ–≤–µ—Ç—É–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É')
    itembtn3 = types.KeyboardButton('–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
    itembtn4 = types.KeyboardButton('/restart')
    markup.add(itembtn1, itembtn2, itembtn3, itembtn4)
    problem_saver[message.chat.id] = message.text
    if message.chat.id not in chats_saver: # –µ—Å–ª–∏ —á–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—Å—è

        bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–±–ª–µ–º—É –ø–æ–Ω—è–ª. –ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ —Å –Ω–µ–π –ø–æ–º–æ—á—å?",
            reply_markup=markup,
        )
    
@bot.message_handler(content_types=['text'], func=lambda msg: msg.text in [
    '–ù–∞–ø–∏—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç', 
    '–ü–æ—Å–æ–≤–µ—Ç—É–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É',
    '–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ'
])
def generate_response(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(
        chat_id=message.chat.id,
        text="–°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é... –ù–∞–ª–µ–π –º–Ω–µ –∏–≤–∞–Ω-—á–∞—é.",
        reply_markup=markup,
    )
    bot.send_chat_action(chat_id=message.chat.id, action="typing")

    if message.text == '–ù–∞–ø–∏—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç':
        chats_saver[message.chat.id] = [
            {
                "role": "system",
                "content": argument_prompt,
            },
            {"role": "user", "content": problem_saver[message.chat.id]}
        ]
        chat_completion = client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=chats_saver[message.chat.id],
        ).choices[0].message.content
        
        chats_saver[message.chat.id].append({})
        
        bot.send_message(
            chat_id=message.chat.id,
            text='–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç:',
            reply_markup=markup,
        )
        
        argument[message.chat.id] = chat_completion
        record_to_db(message)
        
        bot.send_message(
            chat_id=message.chat.id,
            text=chat_completion,
        )
    
    elif message.text == '–ü–æ—Å–æ–≤–µ—Ç—É–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É':   
        chats_saver[message.chat.id] = [
            {
                "role": "system",
                "content": literature_prompt,
            },
            {"role": "user", "content": problem_saver[message.chat.id]}
        ]
        chat_completion = client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=chats_saver[message.chat.id],
            response_format={"type": "json_object"}
        ).choices[0].message.content
        
        parsed_literature = json.loads(chat_completion)
        literature_to_go[message.chat.id] = parsed_literature
        
#        literature dict {'titles': List[str], 'descriptions': List[str]}

        markup = types.ReplyKeyboardMarkup(row_width=2)
        itembtns = [types.KeyboardButton(title) for title in parsed_literature['titles']]
        markup.add(*itembtns)
        
        bot.send_message(
            chat_id=message.chat.id,
            text='–í–æ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–æ–≤–µ—Ç—É—é –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ:',
        )
        
        emoji = random.choice(['üìì ', 'üìî ', 'üìí ', 'üìï ', 'üìó ', 'üìò ', 'üìô ', 'üìö ', 'üìñ ',])
        
        bot.send_message(
            chat_id=message.chat.id,
            text='\n\n'.join([emoji + title + '\n' + description for title, description in zip(
                parsed_literature['titles'],
                parsed_literature['descriptions']
            )]),
            reply_markup=markup,
        )
    
    elif message.text == '–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ':
        markup = types.ReplyKeyboardMarkup(row_width=2)
        bot.send_message(
            chat_id=message.chat.id,
            text='–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ—ë –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∞–≤—Ç–æ—Ä–∞ —Ç–æ–∂–µ –Ω–∞–ø–∏—à–∏, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å).',
            reply_markup=markup,
        )
                
@bot.message_handler(content_types=['text'], func=lambda msg: not (msg.text in [
    '–ù–∞–ø–∏—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç', 
    '–ü–æ—Å–æ–≤–µ—Ç—É–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É',
    '–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ'
] or '–ø—Ä–æ–±–ª–µ–º–∞' in msg.text))
def arg_from_lit(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(
        chat_id=message.chat.id,
        text="–°–µ–π—á–∞—Å, –º–æ–º–µ–Ω—Ç... –¢—ã –Ω–µ –≤–∏–¥–µ–ª –º–æ—é –∫—Ä–∞—Å–Ω—É—é —Ä—É—á–∫—É?",
        reply_markup=markup,
    )
    bot.send_chat_action(chat_id=message.chat.id, action="typing")

    chats_saver[message.chat.id] = [
        {
            "role": "system",
            "content": arg_from_lit_prompt + problem_saver[message.chat.id],
        },
        {"role": "user", "content": message.text}
    ]
    chat_completion = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=chats_saver[message.chat.id],
    ).choices[0].message.content

    bot.send_message(
        chat_id=message.chat.id,
        text='–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç:',
        reply_markup=markup,
    )
    
    argument[message.chat.id] = chat_completion
    record_to_db(message)

    bot.send_message(
        chat_id=message.chat.id,
        text=chat_completion,
    )

bot.infinity_polling()
